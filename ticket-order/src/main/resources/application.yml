server:
  port: 8003

spring:
  application:
    name: ticket-order
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:dev}
  
  # Nacos 配置导入
  config:
    import: optional:nacos:ticket-order.yaml
  
  # Nacos 服务发现配置
  cloud:
    nacos:
      server-addr: 127.0.0.1:8848
      discovery:
        enabled: true
        namespace: ""
        group: DEFAULT_GROUP
        register-enabled: true
        ip: 127.0.0.1
        prefer-ip-address: false
      config:
        enabled: true
        import-check:
          enabled: false
  
  # 数据库配置 - 高并发优化
  datasource:
    # 写库配置 - 针对订单创建、支付等写操作优化
    write:
      driver-class-name: com.mysql.cj.jdbc.Driver
      url: jdbc:mysql://${DB_HOST:localhost}:${DB_PORT:3306}/${DB_NAME:ticket_order_db}?useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&useSSL=false&allowPublicKeyRetrieval=true&rewriteBatchedStatements=true&useServerPrepStmts=true&cachePrepStmts=true&prepStmtCacheSize=500&prepStmtCacheSqlLimit=2048&useLocalSessionState=true&elideSetAutoCommits=true&maintainTimeStats=false&autoReconnect=true&failOverReadOnly=false&maxReconnects=3&initialTimeout=1&connectTimeout=10000&socketTimeout=30000
      username: ${DB_USERNAME:root}
      password: ${DB_PASSWORD:123456}
      hikari:
        maximum-pool-size: ${DB_WRITE_MAX_POOL_SIZE:100}
        minimum-idle: ${DB_WRITE_MIN_IDLE:20}
        connection-timeout: ${DB_WRITE_CONNECTION_TIMEOUT:10000}
        idle-timeout: ${DB_WRITE_IDLE_TIMEOUT:300000}
        max-lifetime: ${DB_WRITE_MAX_LIFETIME:1800000}
        leak-detection-threshold: ${DB_WRITE_LEAK_DETECTION_THRESHOLD:30000}
        pool-name: HighConcurrencyWritePool
        auto-commit: false
        transaction-isolation: READ_COMMITTED
    
    # 读库配置 - 针对订单查询等读操作优化
    read:
      driver-class-name: com.mysql.cj.jdbc.Driver
      url: jdbc:mysql://${DB_HOST:localhost}:${DB_PORT:3306}/${DB_NAME:ticket_order_db}?useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&useSSL=false&allowPublicKeyRetrieval=true&rewriteBatchedStatements=true&useServerPrepStmts=true&cachePrepStmts=true&prepStmtCacheSize=1000&prepStmtCacheSqlLimit=4096&useLocalSessionState=true&elideSetAutoCommits=true&maintainTimeStats=false&autoReconnect=true&failOverReadOnly=true&maxReconnects=3&initialTimeout=1&connectTimeout=5000&socketTimeout=15000&useReadOnly=true
      username: ${DB_USERNAME:root}
      password: ${DB_PASSWORD:123456}
      hikari:
        maximum-pool-size: ${DB_READ_MAX_POOL_SIZE:200}
        minimum-idle: ${DB_READ_MIN_IDLE:50}
        connection-timeout: ${DB_READ_CONNECTION_TIMEOUT:5000}
        idle-timeout: ${DB_READ_IDLE_TIMEOUT:180000}
        max-lifetime: ${DB_READ_MAX_LIFETIME:1200000}
        leak-detection-threshold: ${DB_READ_LEAK_DETECTION_THRESHOLD:30000}
        pool-name: HighConcurrencyReadPool
        auto-commit: true
        transaction-isolation: READ_UNCOMMITTED
    
    # 默认配置（保持向后兼容）
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://${DB_HOST:localhost}:${DB_PORT:3306}/${DB_NAME:ticket_order_db}?useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&useSSL=false&allowPublicKeyRetrieval=true
    username: ${DB_USERNAME:root}
    password: ${DB_PASSWORD:123456}
    hikari:
      maximum-pool-size: ${DB_MAX_POOL_SIZE:20}
      minimum-idle: ${DB_MIN_IDLE:5}
      connection-timeout: ${DB_CONNECTION_TIMEOUT:30000}
      idle-timeout: ${DB_IDLE_TIMEOUT:600000}
      max-lifetime: ${DB_MAX_LIFETIME:1800000}
      leak-detection-threshold: ${DB_LEAK_DETECTION_THRESHOLD:60000}

  # Redis配置 - 统一使用Redisson
  redis:
    # 兼容性配置（保持向后兼容）
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    database: ${REDIS_DATABASE:0}
    timeout: ${REDIS_TIMEOUT:1800000}
    # password: ${REDIS_PASSWORD:}  # 注释掉密码配置，避免无密码时的AUTH错误
    lettuce:
      pool:
        max-active: ${REDIS_MAX_ACTIVE:20}
        max-wait: ${REDIS_MAX_WAIT:-1}
        max-idle: ${REDIS_MAX_IDLE:5}
        min-idle: ${REDIS_MIN_IDLE:0}
    
    # Redisson配置 - 高性能优化
    redisson:
      config: |
        singleServerConfig:
          address: "redis://${REDIS_HOST:localhost}:${REDIS_PORT:6379}"
          password: ${REDIS_PASSWORD:null}
          database: ${REDIS_DATABASE:0}
          connectionPoolSize: ${REDIS_CONNECTION_POOL_SIZE:64}
          connectionMinimumIdleSize: ${REDIS_CONNECTION_MIN_IDLE:10}
          idleConnectionTimeout: ${REDIS_IDLE_CONNECTION_TIMEOUT:10000}
          connectTimeout: ${REDIS_CONNECT_TIMEOUT:10000}
          timeout: ${REDIS_TIMEOUT:3000}
          retryAttempts: ${REDIS_RETRY_ATTEMPTS:3}
          retryInterval: ${REDIS_RETRY_INTERVAL:1500}
          keepAlive: true
          tcpNoDelay: true
        codec: !<org.redisson.codec.JsonJacksonCodec> {}
        threads: ${REDIS_THREADS:16}
        nettyThreads: ${REDIS_NETTY_THREADS:32}
        transportMode: "NIO"

# MyBatis-Plus配置
mybatis-plus:
  mapper-locations: classpath:/mapper/**/*.xml
  type-aliases-package: com.ticketsystem.order.entity
  global-config:
    db-config:
      id-type: auto
      logic-delete-field: deleted
      logic-delete-value: 1
      logic-not-delete-value: 0

# Knife4j配置
knife4j:
  enable: true
  openapi:
    title: 订单服务API文档
    description: 订单服务API文档
    email: admin@ticketsystem.com
    version: 1.0
    group:
      default:
        group-name: 默认分组
        api-rule: package
        api-rule-resources:
          - com.ticketsystem.order.controller

# Spring Boot Actuator配置
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: always
    metrics:
      enabled: true
    prometheus:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    tags:
      application: ${spring.application.name}
      environment: ${spring.profiles.active}

# RocketMQ配置 - 使用本地RocketMQ
rocketmq:
  name-server: ${ROCKETMQ_NAME_SERVER:127.0.0.1:9876}
  producer:
    group: order-producer-group
    send-message-timeout: 3000
    compress-message-body-threshold: 4096
    max-message-size: 4194304
    retry-times-when-send-failed: 2
    retry-times-when-send-async-failed: 2
    retry-next-server: true
    access-key: ${ROCKETMQ_ACCESS_KEY:}
    secret-key: ${ROCKETMQ_SECRET_KEY:}
  consumer:
    access-key: ${ROCKETMQ_ACCESS_KEY:}
    secret-key: ${ROCKETMQ_SECRET_KEY:}

# 定时任务配置
  task:
    scheduling:
      enabled: true
      pool:
        size: 5
      thread-name-prefix: order-monitor-
    execution:
      pool:
        core-size: 10
        max-size: 50
        queue-capacity: 200
        keep-alive: 60s
        thread-name-prefix: order-async-

# 应用配置
app:
  # 订单服务配置
  order:
    # 统一订单服务配置
    unified:
      # Redis配置
      redis:
        enabled: ${ORDER_REDIS_ENABLED:true}
        order-expire-time: ${ORDER_EXPIRE_TIME:900}  # 15分钟
        user-orders-expire-time: ${ORDER_USER_ORDERS_EXPIRE_TIME:900}
        batch-size: ${ORDER_BATCH_SIZE:100}
        retry-times: ${ORDER_RETRY_TIMES:3}
      
      # 异步处理配置
      async:
        enabled: ${ORDER_ASYNC_ENABLED:true}
        persist-delay: ${ORDER_PERSIST_DELAY:100}  # 100ms后持久化
        notification-delay: ${ORDER_NOTIFICATION_DELAY:50}  # 50ms后发送通知
      
      # 性能配置
      performance:
        enable-monitoring: ${ORDER_PERFORMANCE_MONITORING:true}
        slow-query-threshold: ${ORDER_SLOW_QUERY_THRESHOLD:1000}  # 1秒
        high-concurrency-threshold: ${ORDER_HIGH_CONCURRENCY_THRESHOLD:100}  # 100 QPS
    
    # 迁移配置
    migration:
      # 启用渐进式迁移
      enable-gradual: ${ORDER_MIGRATION_ENABLED:false}
      
      # 各方案流量分配比例（总和必须为100）
      redis-percentage: ${ORDER_MIGRATION_REDIS_PERCENTAGE:0}      # Redis方案流量比例
      unified-percentage: ${ORDER_MIGRATION_UNIFIED_PERCENTAGE:0}    # 统一方案流量比例
      database-percentage: ${ORDER_MIGRATION_DATABASE_PERCENTAGE:100}   # 数据库方案流量比例

# 日志配置
logging:
  level:
    com.ticketsystem.order: ${LOG_LEVEL:debug}
    com.ticketsystem.order.service.UnifiedOrderService: ${LOG_LEVEL:debug}
    com.ticketsystem.order.service.RedisBasedOrderService: ${LOG_LEVEL:debug}
    com.ticketsystem.order.service.GradualMigrationService: ${LOG_LEVEL:debug}
    com.ticketsystem.order.service.AsyncOrderProcessor: ${LOG_LEVEL:debug}
    org.springframework.security: ${LOG_LEVEL:debug}
    org.springframework.web: ${LOG_LEVEL:info}
    org.springframework.scheduling: ${LOG_LEVEL:info}
    org.redisson: ${LOG_LEVEL:info}
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n"
  file:
    name: logs/ticket-order.log
    max-size: ${LOG_MAX_SIZE:100MB}
    max-history: ${LOG_MAX_HISTORY:30}